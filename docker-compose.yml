
networks:
  kafka-network:

services:
  kafka:
    image: 'apache/kafka:3.8.1'  # Image compatible avec KRaft
    container_name: kafka-kraft
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka-kraft:9093"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_LISTENERS: "PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka-kraft:9092"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_LOG_DIRS: "/var/lib/kafka/data"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
    volumes:
      - kafka_data:/var/lib/kafka/data  # Persistency
    ports:
      - "9092:9092"  # Port accessible pour l'API
      - "9093:9093"
    networks:
      - kafka-network
    command: >
      sh -c "
        # Démarre Kafka en arrière-plan
        /opt/kafka/bin/kafka-server-start.sh /opt/kafka/config/kraft/server.properties &

        # Attend que Kafka soit démarré
        KAFKA_PID=$$!
        sleep 5

        # Création du topic 'incidents' après le démarrage de Kafka
        /opt/kafka/bin/kafka-topics.sh --create --topic incidents --bootstrap-server localhost:9092 --partitions 1 --replication-factor 1 || exit 1

        # Affiche la liste des topics pour vérification
        echo 'List of currently existing topics:'
        /opt/kafka/bin/kafka-topics.sh --list --bootstrap-server localhost:9092

        # Attend que Kafka termine son exécution
        wait $$KAFKA_PID
      "

  api:
    build: .
    container_name: cybersecurity_cont
    ports:
      - 4500:4500
    depends_on:
      - kafka  # Lancer Kafka avant l'API
    environment:
      KAFKA_BROKER: "kafka-kraft:9092"  # Point de connexion pour l'API vers Kafka
    networks:
      - kafka-network

volumes:
  kafka_data: